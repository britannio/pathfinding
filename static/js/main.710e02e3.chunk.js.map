{"version":3,"sources":["logo.svg","PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Node","this","props","row","col","isStart","isFinish","isWall","onMouseDown","onMouseUp","onMouseEnter","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbours","sort","nodeA","nodeB","unvisitedNeighbours","neighbours","filter","neighbour","getUnvisitedNeighbours","previousNode","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","nodesInShortestPathOrder","getNodesInShortestPathOrder","currentNode","unshift","animateDijkstra","console","log","i","setTimeout","animateShortestPath","document","getElementById","newGrid","getNewGridWithWallToggled","onClick","visualizeDijkstra","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.710e02e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\n// Creates a React component responsible for rendering a node.\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n      isStart,\r\n      isFinish,\r\n      isWall,\r\n      // callback parameters that can be implemented\r\n      onMouseDown,\r\n      onMouseUp,\r\n      onMouseEnter\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        // Callbacks triggered when the mouse is over the node element\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport const DEFAULT_NODE = {\r\n  row: 0,\r\n  col: 0\r\n};\r\n","\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    // An array of visited nodes in the order they were visited in. This is \r\n    // iterated at fixed time intervals to progressively animate the grid\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    // !!<num> returns false if num is zero otherwise it returns true\r\n    // This is the same as iterating while the length of unvisitedNodes > 0\r\n    while (!!unvisitedNodes.length) {\r\n        \r\n        // Converts the unsorted grid into a list of nodes ordered by distance\r\n        sortNodesByDistance(unvisitedNodes);\r\n        // .shift() removes and returns the first item in an array\r\n        const closestNode = unvisitedNodes.shift();\r\n\r\n        // if the closest node is a wall then jump to the next iteration\r\n        // as .shift() has removed the wall from the unvisitedNodes array\r\n        if (closestNode.isWall) continue;\r\n        // Stops the search if we're boxed in and the end node is unreachable\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n\r\n        closestNode.isVisited = true;\r\n        // .push() adds an item to the end of an array\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        updateUnvisitedNeighbours(closestNode, grid);\r\n\r\n    }\r\n}\r\n\r\n// uses the sort() function to order the nodes from shortest to largest distance\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\n\r\n// Sets the distance of unvisited neighbours to the current distance plus one\r\nfunction updateUnvisitedNeighbours(node, grid) {\r\n    // Array of unvisited neighbouring nodes to the one provided\r\n    const unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\r\n    \r\n    for (const neighbour of unvisitedNeighbours) {\r\n        neighbour.distance = node.distance + 1;\r\n        neighbour.previousNode = node;\r\n    }\r\n}\r\n\r\n// adds the node above, below, to the left and to the right of the provided node\r\n// to an array then removes visited nodes from that array and returns it\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n    const neighbours = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbours.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n    if (col > 0) neighbours.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n    return neighbours.filter(neighbour => !neighbour.isVisited);\r\n}\r\n\r\n\r\n// Returns a 1D array of nodes from the 2D grid array. Ordered left to right and\r\n// top to bottom\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n\r\n\r\n// Traverses the shortest path from finish to start, adding each node into an \r\n// array then returning it\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const getNodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        getNodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return getNodesInShortestPathOrder;\r\n}","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\r\n\r\n// Start and finish node constants\r\nconst START_NODE_ROW = 9;\r\nconst START_NODE_COL = 8;\r\nconst FINISH_NODE_ROW = 9;\r\nconst FINISH_NODE_COL = 24;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false\r\n    };\r\n  }\r\n\r\n  // Invoked immediately after a component is mounted.\r\n  // Initialization that requires DOM nodes go here.\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n\r\n    // Updates the app state with the initial grid\r\n    this.setState({ grid });\r\n  }\r\n\r\n  // Starts dijkstra process and starts the animation\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    console.log(visitedNodesInOrder);\r\n  }\r\n\r\n  // Incrementally shows a larger and larger portion of the visited \r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  // Animation for the tiles forming the shortest path\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  // Updates the grid to reflect a tile being selected\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  // Disable wall creation mode\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  // Converts a node to/from a wall if the mouse is pressed\r\n  handleMouseEnter(row, col) {\r\n    console.log('(' + row + ',' + col + ')')\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    // Iterates through the nodes array and renders each node w/ its given\r\n    // properties\r\n    return (\r\n      <>\r\n        <button onClick={() => this.visualizeDijkstra()}>\r\n          Visualize Dijkstra's Algorithm\r\n        </button>\r\n\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n\r\n                  const { row, col, isStart, isFinish, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      row={row}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      // Implementation of the callback functions\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n\r\n  // Populates the 2D grid array with node objects containing node properties\r\n  for (let row = 0; row < 19; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 32; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null\r\n  };\r\n};\r\n\r\n// Creates a copy of the existing grid with a node's isWall property altered\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  // The old node from the grid\r\n  const node = newGrid[row][col];\r\n\r\n  // Creates a duplicate of the old node but with isWall toggled\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall\r\n  };\r\n  // Inserts the new node back into the grid\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}